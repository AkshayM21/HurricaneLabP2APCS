#BlueJ class context
comment0.params=filename
comment0.target=int\ determineFileLength(java.lang.String)
comment0.text=\n\ Comment\ this\ method\ even\ though\ you\ did\ not\ write\ it.\n\ \n\ @throws\ IOException\ \ if\ file\ with\ the\ hurricane\ information\ cannot\ be\ found\n
comment1.params=filename
comment1.target=void\ readFile(java.lang.String)
comment1.text=\n\ Comment\ this\ method\ even\ though\ you\ did\ not\ write\ it.\n
comment10.params=start\ end
comment10.target=void\ sortPressuresHelper(int,\ int)
comment10.text=\n\ Sorts\ descending\ a\ portion\ of\ array\ based\ upon\ pressure,\ \n\ using\ selection\ sort.\n\ \n\ @param\ \ \ start\ \ \ the\ first\ index\ to\ start\ the\ sort\n\ @param\ \ \ end\ \ \ \ \ one\ past\ the\ last\ index\ to\ sort;\ hence,\ end\ position\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ is\ excluded\ in\ the\ sort\n
comment11.params=low\ high
comment11.target=void\ sortWindSpeeds(int,\ int)
comment11.text=\n\ Sorts\ ascending\ based\ upon\ wind\ speeds\ using\ a\ recursive\ merge\ sort.\ \n
comment12.params=low\ mid\ high
comment12.target=void\ mergeWindSpeedsSortHelper(int,\ int,\ int)
comment12.text=\n\ Merges\ two\ consecutive\ parts\ of\ an\ array,\ using\ wind\ speed\ as\ a\ criteria\n\ and\ a\ temporary\ array.\ \ The\ merge\ results\ in\ an\ ascending\ sort\ between\n\ the\ two\ given\ indices.\n\ \n\ @precondition\ the\ two\ parts\ are\ sorted\ ascending\ based\ upon\ wind\ speed\n\ \n\ @param\ low\ \ \ the\ starting\ index\ of\ one\ part\ of\ the\ array.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ This\ index\ is\ included\ in\ the\ first\ half.\n\ @param\ mid\ \ \ the\ starting\ index\ of\ the\ second\ part\ of\ the\ array.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ This\ index\ is\ included\ in\ the\ second\ half.\n\ @param\ high\ \ the\ ending\ index\ of\ the\ second\ part\ of\ the\ array.\ \ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ This\ index\ is\ included\ in\ the\ merge.\n
comment13.params=year
comment13.target=Hurricane[]\ searchYear(int)
comment13.text=\n\ Sequential\ search\ for\ all\ the\ hurricanes\ in\ a\ given\ year.\n\ \n\ @param\ \ \ year\n\ @return\ \ an\ array\ of\ objects\ in\ Hurricane\ that\ occured\ in\n\ \ \ \ \ \ \ \ \ \ the\ parameter\ year\n
comment2.params=
comment2.target=int\ findMaxWindSpeed()
comment2.text=\n\ Finds\ the\ maximum\ wind\ speed\ of\ the\ hurricanes\n\ @return\ the\ maximium\ wind\ speed\n
comment3.params=
comment3.target=int\ findMaxPressure()
comment3.text=\n\ Finds\ the\ maximum\ pressure\ of\ the\ hurricanes\n\ @return\ the\ maximum\ pressure\n
comment4.params=
comment4.target=int\ findMinWindSpeed()
comment4.text=\n\ Finds\ the\ minimum\ wind\ speed\ of\ the\ hurricanes\n\ @return\ the\ minimum\ wind\ speed\n
comment5.params=
comment5.target=int\ findMinPressure()
comment5.text=\n\ Finds\ the\ minimum\ pressure\ of\ the\ hurricanes\n\ @return\ the\ minimum\ pressure\n
comment6.params=
comment6.target=double\ calculateAverageWindSpeed()
comment6.text=\n\ Finds\ the\ average\ wind\ speed\ of\ the\ hurricanes\n\ @return\ the\ average\ wind\ speed\n
comment7.params=
comment7.target=double\ calculateAveragePressure()
comment7.text=\n\ Finds\ the\ average\ pressure\ of\ the\ hurricanes\n\ @return\ the\ average\ pressure\n
comment8.params=
comment8.target=double\ calculateAverageCategory()
comment8.text=\n\ Finds\ the\ average\ category\ of\ the\ hurricanes\n\ @return\ the\ average\ category\n
comment9.params=
comment9.target=void\ sortPressures()
comment9.text=\n\ Sorts\ descending\ based\ upon\ pressures\ using\ a\ non-recursive\ merge\ sort.\n
numComments=14
